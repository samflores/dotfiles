--regex-ruby=/^[ \t]*(get|post|put|delete|head)[ \t\(]*['"](.*)['"][ \t\)]*/\1 \2/s,route/

--regex-ruby=/^[ \t]*property[ \t]+:([a-zA-Z0-9_]+)/\1/a,property/
--regex-ruby=/^[ \t]*has[ \t]+1,[ \t]+:([a-zA-Z0-9_]+)/\2/a,to 1 association/
--regex-ruby=/^[ \t]*has[ \t]+n,[ \t]+:([a-zA-Z0-9_]+)/\2/a,to n association/
--regex-ruby=/^[ \t]*belongs_to[ \t]+:([a-zA-Z0-9_]+)/\1/a,belongs to association/

--regex-ruby=/^[ \t]*let[ \t\(]*:([^) ]+)[ \t\)]*/\1/s,let/
--regex-ruby=/^[ \t]*it[ \t\(]*['"](.*)['"][ \t\)]*/\1/s,spec/
--regex-ruby=/^[ \t]*describe[ \t\(]*['"](.*)['"][ \t\)]*/\1/s,spec group/

--langdef=clojure
--langmap=clojure:.clj
--regex-clojure=/^\(def[ \t]+(\^\{.*\})?[ \t]*([^ \t]+).*/\2/d,definition/
--regex-clojure=/^\(defn[ \t]+(\^\{.*\})?[ \t]*([^ \t]+).*/\2/d,function definition/
--regex-clojure=/^\(defn\-?[ \t]+(\^\{.*\})?[ \t]*([^ \t]+).*/\2/d,private function definition/
--regex-clojure=/^\(defmacro[ \t]+(\^\{.*\})?[ \t]*([^ \t]+).*/\2/d,macro definition/
--regex-clojure=/^\(deftype[ \t]+(\^\{.*\})?[ \t]*([^ \t]+).*/\2/d,type definition/
--regex-clojure=/^\(defrecord[ \t]+(\^\{.*\})?[ \t]*([^ \t]+).*/\2/d,record definition/
--regex-clojure=/^\(definterface[ \t]+(\^\{.*\})?[ \t]*([^ \t]+).*/\2/d,interface definition/
--regex-clojure=/^\(defroutes[ \t]+(\^\{.*\})?[ \t]*([^ \t]+).*/\2/d,routes definition/
